import{_ as a,p as e,q as h,a1 as r}from"./framework-96b046e1.js";const t={},s=r('<h2 id="_1-hashmap-和-concurrenthashmap-的区别" tabindex="-1"><a class="header-anchor" href="#_1-hashmap-和-concurrenthashmap-的区别" aria-hidden="true">#</a> 1 HashMap 和 ConcurrentHashMap 的区别？</h2><p>hashmap 是线程不安全的，put 时在多线程情况下，会形成环从而导致死循环 (jdk1.7)。</p><p>CoucurrentHashMap 是线程安全的，采用分段锁机制，减少锁的粒度。</p><h2 id="_2-hashmap-内部是如何实现的" tabindex="-1"><a class="header-anchor" href="#_2-hashmap-内部是如何实现的" aria-hidden="true">#</a> 2 hashMap 内部是如何实现的</h2><p>hashmap 基于数组实现的，通过对 key 的 hashcode &amp; 数组的长度得到在数组中位置，如果有冲突就用拉链法形成链表解决冲突，如果链表长度 &gt;= 8，会转化为红黑树，&lt;=6 时，转化为链表。hashmap 数组长度为 2^n，利于扩容时迁移，扩容后要么在原位置，要么在原位置+n 的位置（二进制左边多 1）</p><p>为什么长度是 8：链表平均查找长度为 8/2=4,红黑树为$log_28=3$，红黑树效率高</p><p>为什么选择 6 转化回链表：有 7 作缓存，防止链表和树频繁转化。</p><h2 id="_3-如果-hashmap-的-key-是一个自定义类-有什么要注意" tabindex="-1"><a class="header-anchor" href="#_3-如果-hashmap-的-key-是一个自定义类-有什么要注意" aria-hidden="true">#</a> 3 如果 hashmap 的 key 是一个自定义类，有什么要注意？</h2><p>该类必须重写 hashcode() 和 equals()</p><h2 id="_4-arraylist-和-linkedlist-的区别-如果一直在-list-的尾部添加元素-用哪-个效率高" tabindex="-1"><a class="header-anchor" href="#_4-arraylist-和-linkedlist-的区别-如果一直在-list-的尾部添加元素-用哪-个效率高" aria-hidden="true">#</a> 4 ArrayList 和 LinkedList 的区别，如果一直在 list 的尾部添加元素，用哪 个效率高？</h2><p>ArrayList 采用数组数组实现的，查找效率比 LinkedList 高。</p><p>LinkedList 采用双向链表实现的，插入和删除的效率比 ArrayList 要高。</p><p>一直在 list 的尾部添加元素，LinkedList 效率要高</p><h2 id="_5-hashmap-扩容机制-负载因子是多少-容量为什么是-2-n" tabindex="-1"><a class="header-anchor" href="#_5-hashmap-扩容机制-负载因子是多少-容量为什么是-2-n" aria-hidden="true">#</a> 5 hashmap 扩容机制，负载因子是多少，容量为什么是 2^n</h2><p>负载因子是 0.75</p><p>2^n 是为了散列更均匀。在 2^n，计算下标求余运算可以简化为 (n-1)&amp;hash，速度更快。以及扩容迁移方便。</p><h2 id="_6-concurrenthashmap-锁加在了哪些地方" tabindex="-1"><a class="header-anchor" href="#_6-concurrenthashmap-锁加在了哪些地方" aria-hidden="true">#</a> 6 ConcurrentHashMap 锁加在了哪些地方</h2><p>1.7 用 ReentrantLock 加在每个 segment 上面</p><p>1.8 加在 node 节点，采用节点锁</p><h2 id="_7-treemap-底层" tabindex="-1"><a class="header-anchor" href="#_7-treemap-底层" aria-hidden="true">#</a> 7 TreeMap 底层</h2><p>TreeMap 的实现就是红黑树数据结构，也就说是一棵自平衡的排序二叉树，这样就可以保证当需要快速检索指定节点。 红黑树的插入、删除、遍历时间复杂度都为 O(lgN)，所以性能上低于哈希表。但是哈希表 无法提供键值对的有序输出，红黑树因为是排序插入的，可以按照键的值的大小有序输出。</p><h3 id="_8-concurrenthashmap-有啥优势-1-7-1-8-区别" tabindex="-1"><a class="header-anchor" href="#_8-concurrenthashmap-有啥优势-1-7-1-8-区别" aria-hidden="true">#</a> 8 concurrenthashmap 有啥优势，1.7，1.8 区别</h3><p>1.8 中放弃了 Segment 臃肿的设计，取而代之的是采用 Node + CAS + Synchronized 来 保证并发安全进行实现</p><p>CAS：在判断数组中当前位置为 null 的时候，使用 CAS 来把这个新的 Node 写入数组中对应的位置，整个判断是个大循环，cas 操作成功会退出，cas 失败会进入下一次循环，即 synchronized 的情况</p><p>synchronized ：当数组中的指定位置不为空时，通过加锁来添加这个节点进入数组 (链表 &lt;8) 或者是红黑树（链表&gt;=8）</p><p>1.8 中使用一个 volatile 类型的变量 baseCount 记录元素的个数，当 插入新数据或则删除数据时，会通过 addCount() 方法更新 baseCount，通过累加 baseCount 和 CounterCell 数组中的数量，即可得到元素的总个数</p><h2 id="_9-arraylist-是否会越界" tabindex="-1"><a class="header-anchor" href="#_9-arraylist-是否会越界" aria-hidden="true">#</a> 9 ArrayList 是否会越界</h2><p>并发 add 操作时，会发生数组越界</p><h2 id="_10-java-集合类框架的基本接口有哪些" tabindex="-1"><a class="header-anchor" href="#_10-java-集合类框架的基本接口有哪些" aria-hidden="true">#</a> 10 Java 集合类框架的基本接口有哪些？</h2><p>Collection：代表一组对象，每一个对象都是它的子元素。</p><p>Set：不包含重复元素的 Collection。</p><p>List：有顺序的 collection，并且可以包含重复元素。</p><p>Map：可以把键 (key) 映射到值 (value) 的对象，键不能重复</p><h2 id="_11-什么是迭代器" tabindex="-1"><a class="header-anchor" href="#_11-什么是迭代器" aria-hidden="true">#</a> 11 什么是迭代器</h2><p>Iterator 提供了统一遍历操作集合元素的统一接口</p><h2 id="_12-快速失败-fail-fast-和安全失败-fail-safe-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_12-快速失败-fail-fast-和安全失败-fail-safe-的区别是什么" aria-hidden="true">#</a> 12 快速失败 (fail-fast) 和安全失败 (fail-safe) 的区别是什么？</h2><p>快速失败：迭代时，对集合内容作了增删改快抛出 Concurrent Modification Exception 快速失败。（检查 modCount 变量值是否改变）</p><p>安全失败：迭代时，迭代的是集合副本，不会读取到修改的内容。</p><h2 id="_13-hashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#_13-hashmap-和-hashtable-有什么区别" aria-hidden="true">#</a> 13 HashMap 和 Hashtable 有什么区别？</h2><p>HashMap 允许键和值是 null，而 Hashtable 不允许键或者值是 null</p><p>Hashtable 是同步的，而 HashMap 不是。 一般认为 Hashtable 是一个遗留的类。</p><h2 id="_14-arraylist-vector-linkedlist-的存储性能和特性是什么" tabindex="-1"><a class="header-anchor" href="#_14-arraylist-vector-linkedlist-的存储性能和特性是什么" aria-hidden="true">#</a> 14 ArrayList,Vector,LinkedList 的存储性能和特性是什么？</h2><p>ArrayList 和 Vector 都是使用数组方式存储数据，LinkedList　以链表方式实现。</p><p>Vector 线程安全，效率较低。</p>',44),n=[s];function i(p,d){return e(),h("div",null,n)}const l=a(t,[["render",i],["__file","Java集合.html.vue"]]);export{l as default};
