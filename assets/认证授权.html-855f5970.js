import{_ as a,M as i,p as t,q as n,R as e,t as r,N as s,a1 as h}from"./framework-96b046e1.js";const c={},d=h('<h2 id="认证-authentication-和授权-authorization-有什么区别" tabindex="-1"><a class="header-anchor" href="#认证-authentication-和授权-authorization-有什么区别" aria-hidden="true">#</a> 认证（authentication）和授权（authorization）有什么区别?</h2><p>Authentication（认证） 是验证您的身份的凭据（例如用户名/用户ID和密码），通过这个凭据，系统得以知道你就是你，也就是说系统存在你这个用户。所以，Authentication 被称为身份/用户验证。</p><p><strong>Authorization（授权）</strong> 发生在 <strong>Authentication（认证）</strong> 之后。授权主要掌管我们访问系统的权限。比如有些特定资源只能具有特定权限的人才能访问比如admin，有些对系统资源操作比如删除、添加、更新只能特定人才具有。</p><h2 id="cookies-和-session-是什么" tabindex="-1"><a class="header-anchor" href="#cookies-和-session-是什么" aria-hidden="true">#</a> Cookies 和 Session 是什么？</h2><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><p>Cookie： Cookie 存放在客户端，一般用来保存用户信息。 Session：Session 存放在服务端，记录用户状态。</p><p>一般来说会再Cookies里放一个SessionId字段标志用户，传递给服务端。</p><h2 id="为什么cookies-无法防止csrf攻击-token可以" tabindex="-1"><a class="header-anchor" href="#为什么cookies-无法防止csrf攻击-token可以" aria-hidden="true">#</a> 为什么Cookies 无法防止CSRF攻击，token可以</h2><p>CSRF：跨站请求伪造</p><p>token一般存放在local storage 中，一般通过前端代码和后端交互进行传递。</p><p>cookies 的话点击页面标签链接，会传递cookies，达到攻击效果</p><h2 id="什么是-token-什么是jwt-如何基于token进行身份验证" tabindex="-1"><a class="header-anchor" href="#什么是-token-什么是jwt-如何基于token进行身份验证" aria-hidden="true">#</a> 什么是 Token？什么是JWT？如何基于Token进行身份验证</h2><p>Token：验证用户身份的令牌。session依赖服务端保存用户状态，而token可以在客户端携带用户信息</p><p>JWT：带有签名的Json格式的Token。由Header ，payload和Signature组成</p><h2 id="什么是oauth2" tabindex="-1"><a class="header-anchor" href="#什么是oauth2" aria-hidden="true">#</a> 什么是OAuth2？</h2><p>OAuth2（Open Authorization 2.0）是一种开放标准的授权协议，用于授权和验证用户在不同应用程序之间的访问和数据共享。它允许用户在不分享其密码的情况下，通过将访问令牌（Access Token）分发给第三方应用程序，授权它们代表用户访问受保护的资源。</p><p>OAuth2的核心概念包括以下几个角色：</p><ol><li><p>资源所有者（Resource Owner）：通常是用户，拥有受保护的资源，并能够授权第三方应用程序访问这些资源。</p></li><li><p>客户端（Client）：第三方应用程序，希望访问资源所有者的受保护资源。</p></li><li><p>授权服务器（Authorization Server）：负责验证资源所有者的身份并授权客户端访问令牌。</p></li><li><p>资源服务器（Resource Server）：存储受保护资源的服务器，只接受有效的访问令牌。</p></li></ol><p>在OAuth2的流程中，客户端通过向授权服务器发送请求，获取授权码（Authorization Code），然后使用授权码向授权服务器请求访问令牌。一旦授权服务器验证授权码的有效性，并验证客户端凭据，它将生成访问令牌和刷新令牌（Refresh Token）。客户端可以使用访问令牌来请求受保护的资源，而刷新令牌用于获取新的访问令牌，以延长访问令牌的有效期。</p><p>OAuth2的优势在于它提供了一种标准化的授权机制，使用户能够控制其数据的访问权限，并使第三方应用程序能够安全地访问和使用这些数据，而无需直接共享用户的密码。这种授权机制被广泛应用于一个应用程序需要访问另一个应用程序的用户数据的场景，例如在社交媒体登录、第三方应用程序集成等方面。</p><h2 id="什么是sso" tabindex="-1"><a class="header-anchor" href="#什么是sso" aria-hidden="true">#</a> 什么是SSO</h2><p>SSO(Single Sign On)即单点登录说的是用户登陆多个子系统的其中一个就有权访问与其相关的其他系统</p><h2 id="oauth2-四种授权模式" tabindex="-1"><a class="header-anchor" href="#oauth2-四种授权模式" aria-hidden="true">#</a> OAuth2 四种授权模式</h2><p>OAuth 2.0定义了四种授权模式:</p><ul><li>授权码模式(Authorization Code):适用于有服务端的Web应用,授权码方式更加安全。</li><li>简化模式(Implicit):适用于纯客户端的应用,如单页面应用。</li><li>密码模式(Resource Owner Password Credentials):适用于高度信任的客户端,如自己的产品线应用。</li><li>客户端模式(Client Credentials):适用于无用户的机器对机器的授权,如数据接口对接。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',26),p={href:"https://bgww.apachecn.org/#/docs/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88JavaGuide%EF%BC%89",target:"_blank",rel:"noopener noreferrer"};function l(u,k){const o=i("ExternalLinkIcon");return t(),n("div",null,[d,e("p",null,[e("a",p,[r("bgww.apachecn.org/#/docs/认证授权面试题（JavaGuide）"),s(o)])])])}const A=a(c,[["render",l],["__file","认证授权.html.vue"]]);export{A as default};
